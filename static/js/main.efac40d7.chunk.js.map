{"version":3,"sources":["assets/feature-graphic.png","assets/device-promo.png","assets/download-on-app-store.svg","assets/play_store.png","components/Header/index.js","components/Header/Header.js","components/DeviceRender/index.js","components/DeviceRender/DeviceRender.js","components/AppDescription/index.js","components/AppDescription/AppDescription.js","components/StoreBadges/index.js","components/StoreBadges/StoreBadges.js","components/Contact/index.js","components/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","require","alt","DeviceRender","props","className","AppDescription","StoreBadges","target","rel","href","Contact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,6C,kCCA3CD,EAAOC,QAAU,IAA0B,0C,oDCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,wC,4GCE5BC,G,UCCA,WACb,OACE,gCACE,yBAAKC,IAAKC,EAAQ,IAAqCC,IAAI,YCJlDC,G,MCCM,SAAAC,GACnB,OACE,yBACEJ,IAAKC,EAAQ,IACbI,UAAU,gBACVH,IAAI,WCNKI,G,MCCQ,SAAAF,GACrB,OACE,uBAAGC,UAAU,cAAb,2PCHWE,G,MCCK,SAAAH,GAClB,OACE,yBAAKC,UAAU,mBACb,uBACEG,OAAO,SACPC,IAAI,sBACJC,KAAK,2EAEL,yBACEL,UAAU,YACVL,IAAKC,EAAQ,IACbC,IAAI,eAGR,yBAAKG,UAAU,YACf,yBACEA,UAAU,aACVL,IAAKC,EAAQ,IACbC,IAAI,kBCnBGS,G,MCCC,WACd,OACE,gCACE,uBAAGD,KAAK,8BAAR,c,MCcSE,MAZf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efac40d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/feature-graphic.674d0a7a.png\";","module.exports = __webpack_public_path__ + \"static/media/device-promo.5fee1e15.png\";","module.exports = __webpack_public_path__ + \"static/media/download-on-app-store.2928664f.svg\";","module.exports = __webpack_public_path__ + \"static/media/play_store.eb5ff08d.png\";","import Header from './Header';\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <img src={require(\"../../assets/feature-graphic.png\")} alt=\"logo\" />\n\n    </header>\n  );\n};\n\nexport default Header;\n","import DeviceRender from './DeviceRender';\n\nexport default DeviceRender;","import React from \"react\";\nimport './style.css';\n\nconst DeviceRender = props => {\n  return (\n    <img\n      src={require(\"../../assets/device-promo.png\")}\n      className=\"device-render\"\n      alt=\"logo\"\n    />\n  );\n};\n\nexport default DeviceRender;\n","import AppDescription from './AppDescription';\n\nexport default AppDescription;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst AppDescription = props => {\n  return (\n    <p className=\"intro-text\">\n      Split is the simplest way to separate checks. No more guesstimating who\n      owes who. Tax and tip are automatically calculated based on a personâ€™s\n      order. Simply scan the receipt, add your friends and their order, and\n      settle the bill with Venmo.\n    </p>\n  );\n};\n\nexport default AppDescription;\n","import StoreBadges from './StoreBadges';\n\nexport default StoreBadges;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst StoreBadges = props => {\n  return (\n    <div className=\"badge-container\">\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://apps.apple.com/us/app/split-simplify-your-hangouts/id1500703560\"\n      >\n        <img\n          className=\"app-store\"\n          src={require(\"../../assets/download-on-app-store.svg\")}\n          alt=\"App Store\"\n        />\n      </a>\n      <div className=\"divider\" />\n      <img\n        className=\"play-store\"\n        src={require(\"../../assets/play_store.png\")}\n        alt=\"Play store\"\n      />\n    </div>\n  );\n};\n\nexport default StoreBadges;\n","import Contact from './Contact';\n\nexport default Contact;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Contact = () => {\n  return (\n    <footer>\n      <a href=\"mailto:kevchen21@gmail.com\">Contact</a>\n    </footer>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport DeviceRender from \"./components/DeviceRender\";\nimport AppDescription from \"./components/AppDescription\";\nimport StoreBadges from \"./components/StoreBadges\";\nimport Contact from \"./components/Contact\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <AppDescription />\n      <StoreBadges />\n      <DeviceRender />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}